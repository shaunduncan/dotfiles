# vi:fdm=marker:ft=zsh
# zmodload zsh/zprof

# VARS {{{
export ZSH=$HOME/.zsh

platform=$(uname -s | tr '[:upper:]' '[:lower:]')
fpath=( ${ZSH}/funcs "${fpath[@]}" )
# }}}

# ZSH OPTS {{{
# multiple redirects become implicit tee/cat
setopt multios

# .zsh_history
setopt share_history
setopt append_history
setopt extended_history
setopt hist_find_no_dups
setopt hist_ignore_all_dups

# tab completion uses menu format
setopt auto_menu

# tab completion does more fuzzy matching rather than just suffix matching
setopt complete_in_word

# move cursor to end of word after completion
setopt always_to_end
setopt glob_complete

# disable error message if no match
setopt nonomatch

# movement behavior
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushd_silent

unsetopt correctall
setopt prompt_subst
setopt auto_remove_slash
#}}}

# PLUGINS {{{
autoload -U colors && colors
autoload -Uz vcs_info
autoload -Uz ${ZSH}/funcs/*
# }}}

# COMPLETION {{{
autoload bashcompinit && bashcompinit
autoload -Uz compinit

COMPLETION_WAITING_DOTS="false"

# use cache
zstyle ':completion:*' use-cache on

# use rehash to handle new installs and use menu selection
zstyle ':completion:*' rehash true
zstyle ':completion:*' menu select

# case-insensitive matching
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' list-colors ''

zstyle ':completion:*:*:make:*' tag-order 'targets'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:*:*:processes' command "ps -u `whoami` -o pid,user,comm -w -w"

# disable named-directories autocompletion
zstyle ':completion:*:cd:*' tag-order local-directories directory-stack path-directories

zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric
zstyle -e ':completion:*:approximate:*'  max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3))numeric)'

setopt EXTENDEDGLOB
for dump in $HOME/.zcompdump(#qN.mh+24); do
    compinit
    zcompile "$dump"
done
unsetopt EXTENDEDGLOB
compinit -C

complete -C '/usr/local/bin/aws_completer' aws
# }}}

# HISTORY {{{
export HISTFILE=$HOME/.zsh_history
export SAVEHIST=10000000
export HISTSIZE=10000
export HISTFILESIZE=
export HISTTIMEFORMAT="[%F %T]"
export HISTORY_IGNORE="nohist *"

# prevent space prefixed lines from being added
setopt HIST_IGNORE_SPACE

bindkey '^R' history-incremental-search-backward
bindkey '^F' history-incremental-search-forward
# }}}

# ENVIRONMENT {{{
# homedir bin
export PATH=$HOME/bin:$PATH

export CLICOLOR=1
export ARCHFLAGS='-arch i386 -arch x86_64'

export PAGER=less
export LESS='-FRSX --shift 1 --incsearch'

export XDG_CONFIG_HOME=$HOME/.config
export XDG_DATA_HOME=$HOME/.local/share

# default editor
export EDITOR="$(which vim)"

# platform-specific things
if [[ "${platform}" == "linux" ]]; then
    # --user installed pip
    export PATH=$PATH:$HOME/.local/bin

    # This was some weird xfce thing with tmux panes
    export DBUS_SESSION_BUS_ADDRESS=$(tr '\0' '\n' < /proc/$(pgrep -U $(whoami) xfce4-session)/environ|grep ^DBUS_SESSION_BUS_ADDRESS=|cut -d= -f2-)
elif [[ "${platform}" == "darwin" ]]; then
    # --user installed pip
    export PATH=$HOME/Library/Python/3.9/bin:$PATH

    # this makes the directories on mac blue and not cyan
    export LSCOLORS=Exfxcxdxbxegedabagacad
fi

# load secrets
if [ -f $HOME/.secrets.env ]; then
    source $HOME/.secrets.env
fi
# }}}

# ALIASES {{{

# because i'm paranoid
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'

# always enable color for grep
alias grep='grep --color'

# handy aliases
alias myshell="ps -p $$ | tail -1 | awk '{print $NF}'"
alias l='ls -l'

alias vi='vim'
alias ping='ping -c 10'

# kubectl: keep it short and sweet
alias k='kubectl'
alias kns='kubectl config set-context --current --namespace'
alias ka='k apply -f'
alias kdel='k delete -f'
alias kg='k get'
alias kl='k logs'
alias kdesc='k describe'
alias kx='k config use-context'

# make the `k` alias also support kubectl completion
compdef __start_kubectl k

# ag: honor .ignore files, but not .gitignore
alias ag='ag --skip-vcs-ignores'

# brevity
alias mk=minikube

# handy to login to aws profiles
alias sso='aws sso login --profile'

# get full history instead of a limited set
alias history='history 0'

# linux-only
if [[ "${platform}" == "linux" ]]; then
    alias pbcopy='xclip -selection c'
elif [[ "${platform}" == "darwin" ]]; then
    alias updatedb=/usr/libexec/locate.updatedb
fi

# tmux
alias tmux='tmux -u -f ~/.tmux.conf'
alias attach='tmux attach-session'

# curl utils
alias curlh='curl -D /dev/stdout -o /dev/null -s -L'
alias curlall='curl -D /dev/stdout -o /dev/stdout -s -L'

# tree should always be color
alias tree='tree -C'

# laziness
alias python=python3

# }}}

# MISC UTILS {{{
if [[ "${platform}" == "linux" ]]; then
    # shorthand for xdg-open
    function open() {
        thing=$1
        if [ "$thing" = "" ]; then
            thing="."
        fi
        xdg-open $thing &> /dev/null
    }
fi

# wrapper to tag commands you don't want in zsh_hist
function nohist() {
    $@
}

# explicitly load direnv for the current directory
function loadenv() {
    direnv allow
    eval "$(direnv export zsh)"
}

# wrapper for the glab cli to create a new merge request
function mr() {
    args=($@)

    case "${args[1]}" in

        new)
            glab mr new --title "$(git log -1 --pretty=%s)" --description "$(cat ~/.config/merge_template.txt)" --web --push ${args[@]:1}
            ;;

        *)
            glab mr $@
            ;;
    esac
}
# }}}

# PROMPT CONFIG {{{

# git integration - see: https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Configuration-3
# formats: when not using actionformats
# actionformats: rebase, merge, etc
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' check-for-changes false
zstyle ':vcs_info:*' check-for-unstaged-changes false
zstyle ':vcs_info:*' use-simple true

zstyle ':vcs_info:*' formats "%f %F{green}⎇ %b%f"
zstyle ':vcs_info:*' actionformats "%f %F{magenta}⎇ %b[%a]%f"

precmd () {
    vcs_info
}

# func: _dirpath: show abbreviated path {{{
# Only show last 50 chars. Show '..' for the truncation
function _dirpath() {
    echo "$(perl -pl0 -e "s|^${HOME}|~|;s|([^/])[^/]*/|$""1/|g" <<<${PWD})"
}
# }}}

# func: _prefix: show if in a shell via vim or with direnv active {{{
function _prefix() {
    # ●
    # 🆅 🅴
    # 𝚿  𝚺
    # Ｖ Ｅ
    #
    s=''

    # shell from vim?
    if [ "$(env | grep VIM)" ]; then
        s+='%K{red}%F{black}Ｖ%f%k'
    fi

    # direnv?
    if [ "$(direnv status | egrep -i 'Loaded RC path')" ]; then
        s+='%K{blue}%F{black}Ｅ%f%k'
    fi

    if [ "${s}" ]; then
        s+=" "
    fi

    echo $s
}
# }}}

COMMAND_MODE="%F{red}<<<%f"
INSERT_MODE="%F{cyan}>>>%f"
VI_MODE=$INSERT_MODE

PROMPT='$(_prefix)%F{yellow}%T%f %F{cyan}$(_dirpath)%f${vcs_info_msg_0_} '
# }}}

# OTHER CONFIG {{{

# golang {{{
export GO111MODULE=on
export PATH=$(go env GOROOT)/bin:$(go env GOPATH)/bin:$PATH

# don't use gosumdb because you work with private repos
export GOPRIVATE=gitlab.com/speedscale/*
# }}}

# direnv {{{
# don't be noisy
export DIRENV_LOG_FORMAT=
# }}}

# speedscale {{{
export SPEEDCTL_HOME=${HOME}/.speedscale
export PATH=$SPEEDCTL_HOME:$PATH
# }}}

# kubectl {{{
# zsh completion
source <(kubectl completion zsh)

# kubectl krew
export PATH=$PATH:$HOME/.krew/bin
# }}}

# gcloud {{{
# The next line updates PATH for the Google Cloud SDK.
if [ -f '/opt/gcloud/path.zsh.inc' ]; then . '/opt/gcloud/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/opt/gcloud/completion.zsh.inc' ]; then . '/opt/gcloud/completion.zsh.inc'; fi
# }}}

# minikube {{{
export MINIKUBE_IN_STYLE=0
eval $(minikube docker-env)
# }}}

# nvm {{{
# nvm, but lazy load it
export NVM_DIR="$HOME/.nvm"
alias nvm="unalias nvm; [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"; nvm $@"
# }}}

# homebrew {{{
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_INSTALL_BADGE="✅"
export HOMEBREW_INSTALL_FROM_API=1
# }}}

# pyenv {{{
export PYENV_ROOT="$HOME/.pyenv"
export PATH="${PYENV_ROOT}/bin:${PYENV_ROOT}/shims:$PATH"
eval "$(pyenv init -)"
# }}}

# }}}

# zprof
