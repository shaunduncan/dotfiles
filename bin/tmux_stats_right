#!/usr/bin/env python3
# -*- coding: utf8 -*-
import datetime
import json
import locale
import os
import subprocess
import sys
import time

from operator import itemgetter, methodcaller

try:
    import alsaaudio
except ImportError:
    alsaaudio = None

try:
    import dbus
except ImportError:
    dbus = None

DARWIN = sys.platform == 'darwin'
DIVIDER = '│'

def osa(s):
    return subprocess.check_output(f"osascript -e '{s}'".encode(), shell=True).strip().decode('utf8')


def get_volume():
    if DARWIN:
        muted = osa('output muted of (get volume settings)') == 'true'
        volume = osa('output volume of (get volume settings)') + '%'
    else:
        try:
            mixer = alsaaudio.Mixer(cardindex=1)
        except Exception as e:
            return f'ERR:{e}'
        else:
            muted = 'yes' in subprocess.check_output('pactl list sinks | grep Mute', shell=True)
            volume = mixer.getvolume()[0] + '%'

    if muted:
        return f'#[fg=red]♫ {volume}#[fg=default]'
    else:
       return f'♫ {volume}'


def get_current_track():
    if DARWIN:
        full_status = subprocess.check_output(['osascript', os.path.expanduser('~/bin/spotify_current.scpt')]).strip().decode('utf8')
        full_status = full_status.split('SDUNCAN')

        if not full_status:
            return

        playback_status = full_status[0].strip(', ')
        artist = full_status[1].strip(', ')
        track = full_status[2].strip(', ')

        # fudge the data
        info = {
            'xesam:artist': [artist],
            'xesam:title': track,
        }
    else:
        # Hack: tmux does weird shit with this, so figure out what the actual session bus is
        addr = subprocess.check_output("/home/sduncan/bin/dbus_address", shell=True).strip()
        os.environ['DBUS_SESSION_BUS_ADDRESS'] = addr.decode('utf8')

        bus = dbus.SessionBus()
        player = bus.get_object('org.mpris.MediaPlayer2.spotify', '/org/mpris/MediaPlayer2')
        iface = dbus.Interface(player, 'org.freedesktop.DBus.Properties')
        info = iface.Get('org.mpris.MediaPlayer2.Player', 'Metadata')

        playback_status = iface.Get('org.mpris.MediaPlayer2.Player', 'PlaybackStatus')

    if 'playing' in playback_status.lower():
        prefix = '♫ '
        color = 'default'
    else:
        prefix = '⏸  '
        color = 'orange'

    if not info:
        return ''
    else:
        maxlen = 50
        artist = info['xesam:artist'][0]
        title = info['xesam:title']

        info = f'{prefix}{artist} - {title}'

        if len(info) > maxlen:
            info = info[:maxlen-3] + '...'

        return f'#[fg={color}]{info}#[fg=default]'


def get_current_state(battery):
    state = ''
    pct = 100.0

    if DARWIN:
        batt = subprocess.check_output('pmset -g batt | egrep "%"', shell=True).strip().decode('utf8').split('\n')[-1]
        parts = [s.strip() for s in batt.split('\t') if s.strip()][1:]

        parts = [
            s.strip()
            for item in parts
            for s in item.split(';')
            if s.strip()
        ]

        pct = float(parts[0].rstrip('%'))
        state = parts[1]
    else:
        output = subprocess.check_output(
            'upower -i {} | grep -E "state|percentage"'.format(battery.decode('utf8')), shell=True
        ).strip().decode('utf8').split('\n')

        for line in map(methodcaller('strip'), output):
            name, _, data = line.rpartition(' ')

            if 'state' in name:
                state = data
            elif 'percentage' in name:
                pct = float(data.rstrip('%'))

    return state, pct


def as_hearts(percent, factor=10):
    # FIXME: Show 1 full heart for every 10% it has
    heart = '♥'

    num_full = int(round(percent / factor))
    num_empty = (100 / factor) - num_full

    full_hearts = heart * int(num_full)
    empty_hearts = heart * int(num_empty)

    return f'#[fg=red]{full_hearts}#[fg=default]{empty_hearts}'


def get_memory():
    used = 0
    total = None

    if DARWIN:
        total = float(subprocess.check_output(['sysctl', '-n', 'hw.memsize']).strip())

        vm = subprocess.check_output(['vm_stat']).strip().decode().split('\n')

        # make into a dict
        for item in vm:
            key, value = item.strip().split(':')
            key = key.lower()
            value = value.strip().rstrip('.')

            if key == 'pages free':
                # cached
                used += float(value) * 4096
            elif key == 'pages active':
                # inuse
                used += float(value) * 4096

        total /= 1024.0 ** 3
        used /= 1024.0 ** 3
    else:
        total = None
        free = None
        buffers = None
        cached = None

        with open('/proc/meminfo', 'r') as f:
            for line in f:
                if line.startswith('MemTotal:'):
                    total = float(line.strip().split(' ')[-2])
                elif line.startswith('MemFree:'):
                    free = float(line.strip().split(' ')[-2])
                elif line.startswith('Buffers:'):
                    buffers = float(line.strip().split(' ')[-2])
                elif line.startswith('Cached:'):
                    cached = float(line.strip().split(' ')[-2])

        # Convert to GB
        total /= 1024.0 ** 2
        free /= 1024.0 ** 2
        buffers /= 1024.0 ** 2
        cached /= 1024.0 ** 2
        used = total - free - buffers - cached

    pct = (used / total) * 100.0

    cstart, cend = '', ''

    if pct < 85:
        pass
    elif pct < 95:
        cstart = '#[fg=orange]'
        cend = '#[fg=default]'
    else:
        cstart = '#[fg=red]'
        cend = '#[fg=default]'

    return f'{cstart}M:{used:.1f}GB{cend}'


def get_battery(factor=10):
    status = []

    try:
        output = subprocess.check_output(b'upower -e 2>/dev/null | grep BAT', shell=True).strip().split(b'\n')
    except Exception:
        output = [b'']

    batteries = [s.strip() for s in output]

    for battery in batteries:
        _, _, name = battery.decode('utf8').rpartition('_')
        name = name.replace('BAT', 'B')

        try:
            state, pct = get_current_state(battery)
        except Exception:
            state = ''
            pct = 100

        status.append((name, as_hearts(pct, factor=factor)))

    # f'{pct:.0f}% {name}{hearts}'.strip()

    return ' '.join(
        f'{name}{hearts}'
        for name, hearts in sorted(status, key=itemgetter(0))
    )


def get_loadavg():
    if DARWIN:
        loadstr = subprocess.check_output(b'sysctl -n vm.loadavg', shell=True).split(b' ')[1]
    else:
        with open('/proc/loadavg', 'r') as f:
            loadstr = f.readline().strip().split(' ')[0]

    loadavg = float(loadstr)

    # color wraps
    cstart, cend = '', ''

    if loadavg < 5:
        pass
    elif loadavg < 10:
        cstart = '#[fg=orange]'
        cend = '#[fg=default]'
    else:
        cstart = '#[fg=red]'
        cend = '#[fg=default]'

    return f'{cstart}L:{loadavg:.2f}{cend}'


def get_speedctl():
    try:
        context = subprocess.check_output('speedctl config current-context 2>/dev/null', shell=True)
    except Exception:
        context = b'NO-CONTEXT'

    context = context.strip().decode('utf8')

    cstart, cend = '', ''

    if context in ('dev', 'local') or context.startswith('dev-'):
        pass
    elif 'staging' == context:
        cstart = '#[fg=orange]'
        cend = '#[fg=default]'
    elif 'prod' == context or context.startswith('cust-'):
        cstart = '#[fg=red]'
        cend = '#[fg=default]'
    else:
        # show magenta for unknown
        cstart = '#[fg=magenta]'
        cend = '#[fg=default]'

    return f'{cstart}SC:{context}{cend}'


def get_k8s():
    try:
        context = subprocess.check_output('kubectl config current-context 2>/dev/null', shell=True)
        namespace = subprocess.check_output("kubectl config view --minify --output 'jsonpath={..namespace}' 2>/dev/null", shell=True)
    except Exception:
        context = b'NO-CONTEXT'
        namespace = b'NO-NS'

    context = context.strip().decode('utf8')
    namespace = namespace.strip().decode('utf8') or 'default'

    cstart, cend = '', ''

    if 'prod' == context:
        cstart = '#[fg=red]'
        cend = '#[fg=default]'
    elif 'staging' == context:
        cstart = '#[fg=orange]'
        cend = '#[fg=default]'
    elif 'dev' == context:
        cstart = '#[fg=blue]'
        cend = '#[fg=default]'

    return f'{cstart}K8S:{context}:{namespace}{cend}'


def main():
    factor = 20

    lines = []

    try:
        # lines.append(get_current_track())
        pass
    except:
        # Probably no track...
        pass

    lines.extend([
        get_loadavg(),
        get_memory(),
        get_volume(),
        get_k8s(),
        get_speedctl(),
        get_battery(factor=factor),
    ])

    print('#[fg=colour245 push-default]' + f' {DIVIDER} '.join(filter(bool, lines)) + ' ' + '#[fg pop-default]')



if __name__ == '__main__':
    main()
